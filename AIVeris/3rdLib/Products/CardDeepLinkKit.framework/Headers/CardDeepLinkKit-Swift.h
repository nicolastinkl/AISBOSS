// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
@import CoreGraphics;
@import Foundation.NSURLSession;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSURL;
@class NSDictionary;


/// The DeepLink of application object.
SWIFT_CLASS("_TtC15CardDeepLinkKit10CDDeepLink")
@interface CDDeepLink : NSObject

/// The serialized URL representation of the deep link.
@property (nonatomic, strong) NSURL * _Nullable URL;

/// The query parameters parsed from the incoming URL. @note If the URL conforms to the App Link standard, this will be the query parameters found on `target_url'.
@property (nonatomic, strong) NSDictionary * _Nullable queryParameters;

/// A dictionary of values keyed by their parameterized route component matched in the deep link URL path. @note Given a route alert/:title/:message' and a pathxxxx://alert/hello/world', the route parameters dictionary would be `@{ @"title": @"hello", @"message": @"world" }'.
@property (nonatomic, strong) NSDictionary * _Nullable routeParameters;
@property (nonatomic, readonly, strong) NSDictionary * _Nullable appLinkData;
@property (nonatomic, readonly, strong) NSURL * _Nullable targetURL;
@property (nonatomic, readonly, strong) NSDictionary * _Nullable extras;
@property (nonatomic, readonly, copy) NSString * _Nullable version;
@property (nonatomic, readonly, copy) NSString * _Nullable userAgent;
@property (nonatomic, readonly, strong) NSURL * _Nullable referrerTargetURL;
@property (nonatomic, readonly, strong) NSURL * _Nullable referrerURL;
@property (nonatomic, readonly, copy) NSString * _Nullable referrerAppName;

/// A deep link URL for linking back to the source application.
@property (nonatomic, readonly, strong) NSURL * _Nullable callbackURL;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)hashValue;
@end

@class NSError;


/// Route Registration: Provided a Route rule to let register other appliction initializer in method 'didFinishLaunchingWithOptions' @note private lazy var router: CDDeepLinkRouter = CDDeepLinkRouter()
SWIFT_CLASS("_TtC15CardDeepLinkKit16CDDeepLinkRouter")
@interface CDDeepLinkRouter : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(void (^ _Nonnull)(BOOL, NSError * _Nonnull))routeCBlock :(void (^ _Nonnull)(CDDeepLink * _Nonnull))appDBlock OBJC_DESIGNATED_INITIALIZER;

/// Registers a subclass of `DPLRouteHandler' for a given route.
- (void)registerHandlerClass:(Class _Nonnull)handlerClass route:(NSString * _Nonnull)route;

/// Registers a block for a given route.
///
/// \param routeHandlerBlock routeHandlerBlock description
///
/// \param route route description
- (void)registerBlock:(void (^ _Nonnull)(CDDeepLink * _Nonnull))routeHandlerBlock route:(NSString * _Nonnull)route;

/// Attempts to handle an incoming URL.
///
/// \param url url description
///
/// \param completionHandler completionHandler description
///
/// \returns  return value description
- (BOOL)handleURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nonnull))completionHandler;
- (BOOL)handleRoute:(NSString * _Nonnull)route withDeepLink:(CDDeepLink * _Nonnull)withDeepLink;
- (void)completeRouteWithSuccess:(BOOL)handle error:(NSError * _Nonnull)error;

/// Sets a block which, when executed, returns whether your application is in a state where it can handle deep links.
///
/// \param applicationCanHandleDeepLinksBlock applicationCanHandleDeepLinksBlock description
- (void)setApplicationCanHandleDeepLinksBlock:(BOOL (^ _Nonnull)(void))applicationCanHandleDeepLinksBlock;

/// You can also register your routes in the following way: @code deepLinkRouter[@"table/book/:id"] = [MyBookingRouteHandler class];
///
/// \param obj obj description
///
/// \param forKey forKey description
- (void)setHandlerClass:(Class _Nonnull)obj forKey:(NSString * _Nonnull)forKey;

/// Though not recommended, route handlers can be retrieved as follows: @code id handler = deepLinkRouter[@"table/book/:id"]; @code router.registerBlock({ (deeplink) in }, route: "/say/:title") @endcode @note The type of the returned handler is the type you registered for that route.
- (Class _Nonnull)handlerKeyedSubscript:(NSString * _Nonnull)key;
@end


SWIFT_CLASS("_TtC15CardDeepLinkKit13CDMatchResult")
@interface CDMatchResult : NSObject
@property (nonatomic, strong) NSDictionary * _Nullable namedProperties;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15CardDeepLinkKit10CDReceiver")
@interface CDReceiver : NSObject

/// 单例构造方法
+ (CDReceiver * _Nonnull)singalInstance;
@end

@class NSCoder;

SWIFT_CLASS("_TtC15CardDeepLinkKit19CDRegularExpression")
@interface CDRegularExpression : NSRegularExpression
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CDMatchResult * _Nonnull)matchResultForString:(NSString * _Nonnull)str;
+ (NSString * _Nonnull)stringByRemovingNamedGroupsFromString:(NSString * _Nonnull)str;
+ (NSArray * _Nonnull)namedGroupTokensForString:(NSString * _Nonnull)str;
+ (NSArray<NSString *> * _Nonnull)namedGroupsForString:(NSString * _Nonnull)str;
@end

@class CDViewController;
@class UIViewController;


/// A base class for handling routes.
SWIFT_CLASS("_TtC15CardDeepLinkKit14CDRouteHandler")
@interface CDRouteHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Indicates whether the deep link should be handled.
- (BOOL)shouldHandleDeepLink:(CDDeepLink * _Nonnull)deeplink;
- (BOOL)preferModalPresentation;
- (CDViewController * _Nullable)targetViewController;
- (UIViewController * _Nullable)viewControllerForPresentingDeepLink:(CDDeepLink * _Nonnull)deepLink;
- (void)presentTargetViewController:(CDViewController * _Nonnull)targetViewController presentingViewController:(UIViewController * _Nonnull)presentingViewController;
@end



/// Matcher as Regular
SWIFT_CLASS("_TtC15CardDeepLinkKit14CDRouteMatcher")
@interface CDRouteMatcher : NSObject
@end


SWIFT_CLASS("_TtC15CardDeepLinkKit8CDSender")
@interface CDSender : NSObject

/// 单例构造方法
+ (CDSender * _Nonnull)singalInstance;

/// 配置发送者ID
///
/// @senderID 发送者ID，标记使用服务的APP
- (void)configureSenderID:(NSString * _Nonnull)senderID;

/// 配置回调Scheme
///
/// <code> *@scheme 发送者APP的scheme
/// 
/// </code>
- (void)configureCallbackScheme:(NSString * _Nonnull)scheme;

/// 配置回调参数
///
/// <code> *@parameters 回调参数，字典类型，调用者需要根据实际情况将Key赋值
/// 
/// </code>
- (void)configureServiceParameters:(NSDictionary * _Nonnull (^ _Nonnull)(NSDictionary * _Nonnull))parameters;

/// 判断是否有发送者ID
- (BOOL)hasSenderID;

/// 判断是否有设置发送者APP的scheme
- (BOOL)hasCallbackScheme;
@end

@class NSBundle;

SWIFT_CLASS("_TtC15CardDeepLinkKit16CDViewController")
@interface CDViewController : UIViewController
- (void)configureWithDeepLink:(CDDeepLink * _Nonnull)deepLink;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;

SWIFT_CLASS("_TtC15CardDeepLinkKit4Card")
@interface Card : NSObject

/// swift_once_block_invoke -> Thread Safe and from apple document function.
+ (Card * _Nonnull)sharedInstance;

/// Init config
///
/// Card.sharedInstance.configureWithApplicationServiceId("") { (complate, error) -> Void in
/// //.....
/// }
///
/// \param token app token: Vh7giFfqA1JnJ3BYQLhWxXW1D63H5CcvkaIZa_B7
- (void)configureWithApplicationServiceToken:(NSString * _Nullable)token comfigError:(void (^ _Nonnull)(BOOL, NSError * _Nonnull))comfigError;

/// Allow alertView to be closed/renamed in a chainable manner
///
/// \param view super view
///
/// \param serviceId ID
- (void)showInView:(UIView * _Nonnull)view serviceId:(NSString * _Nonnull)serviceId;
- (void)showInView:(UIView * _Nonnull)view serviceId:(NSString * _Nonnull)serviceId userInfo:(NSDictionary<NSString *, NSString *> * _Nullable)userInfo;
@end



/// Alert View Card.
SWIFT_CLASS("_TtC15CardDeepLinkKit13CardAlertView")
@interface CardAlertView : UIView
+ (CardAlertView * _Nonnull)createInstance;
@property (nonatomic, copy) NSString * _Nonnull serviceId;

/// Animation springEaseIn
+ (void)springEaseIn:(NSTimeInterval)duration animations:(void (^ _Null_unspecified)(void))animations;
+ (void)springEaseOut:(NSTimeInterval)duration animations:(void (^ _Null_unspecified)(void))animations completion:(void (^ _Null_unspecified)(void))completion;
+ (void)spring:(NSTimeInterval)duration animations:(void (^ _Nonnull)(void))animations;
+ (void)springWithCompletion:(NSTimeInterval)duration animations:(void (^ _Null_unspecified)(void))animations completion:(void (^ _Null_unspecified)(BOOL))completion;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// CardView
SWIFT_CLASS("_TtC15CardDeepLinkKit8CardView")
@interface CardView : UIView
@property (nonatomic, copy) NSString * _Nonnull serviceID;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface CardView (SWIFT_EXTENSION(CardDeepLinkKit))
@end


SWIFT_CLASS("_TtC15CardDeepLinkKit12CardViewCell")
@interface CardViewCell : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSNumber (SWIFT_EXTENSION(CardDeepLinkKit))
@end


@interface NSURL (SWIFT_EXTENSION(CardDeepLinkKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull URLString;
@end


@interface NSURLComponents (SWIFT_EXTENSION(CardDeepLinkKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull URLString;
@end

@class NSMutableURLRequest;

@interface NSURLRequest (SWIFT_EXTENSION(CardDeepLinkKit))
@property (nonatomic, readonly, strong) NSMutableURLRequest * _Nonnull URLRequest;
@end


@interface NSURLRequest (SWIFT_EXTENSION(CardDeepLinkKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull URLString;
@end


@interface NSURLSession (SWIFT_EXTENSION(CardDeepLinkKit))
@end


@interface UIColor (SWIFT_EXTENSION(CardDeepLinkKit))
- (nonnull instancetype)initWithHex:(NSString * _Nonnull)hex;
@end


SWIFT_CLASS("_TtC15CardDeepLinkKit13UILoadingView")
@interface UILoadingView : UIView
- (CGFloat)degreesToRadians:(CGFloat)degrees;
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified indicatorView;
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface UIView (SWIFT_EXTENSION(CardDeepLinkKit))
- (void)showLoading;
- (void)hideLoading;
@end


@interface UIView (SWIFT_EXTENSION(CardDeepLinkKit))
@end

#pragma clang diagnostic pop
